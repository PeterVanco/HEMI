/*! AdminLTE app.js
 * ================
 * Main JS application file for AdminLTE v2. This file
 * should be included in all pages. It controls some layout
 * options and implements exclusive AdminLTE plugins.
 *
 * @Author  Almsaeed Studio
 * @Support <http://www.almsaeedstudio.com>
 * @Email   <support@almsaeedstudio.com>
 * @version 2.3.3
 * @license MIT <http://opensource.org/licenses/MIT>
 */

//Make sure jQuery has been loaded before app.js
if (typeof jQuery === "undefined") {
  throw new Error("AdminLTE requires jQuery");
}

/* AdminLTE
 *
 * @type Object
 * @description $.AdminLTE is the main object for the template's app.
 *              It's used for implementing functions and options related
 *              to the template. Keeping everything wrapped in an object
 *              prevents conflict with other plugins and is a better
 *              way to organize our code.
 */
$.AdminLTE = {};

/* --------------------
 * - AdminLTE Options -
 * --------------------
 * Modify these options to suit your implementation
 */
$.AdminLTE.options = {
  //Add slimscroll to navbar menus
  //This requires you to load the slimscroll plugin
  //in every page before app.js
  navbarMenuSlimscroll: true,
  navbarMenuSlimscrollWidth: "3px", //The width of the scroll bar
  navbarMenuHeight: "200px", //The height of the inner menu
  //General animation speed for JS animated elements such as box collapse/expand and
  //sidebar treeview slide up/down. This options accepts an integer as milliseconds,
  //'fast', 'normal', or 'slow'
  animationSpeed: 500,
  //Sidebar push menu toggle button selector
  sidebarToggleSelector: "[data-toggle='offcanvas']",
  //Activate sidebar push menu
  sidebarPushMenu: true,
  //Activate sidebar slimscroll if the fixed layout is set (requires SlimScroll Plugin)
  sidebarSlimScroll: true,
  //Enable sidebar expand on hover effect for sidebar mini
  //This option is forced to true if both the fixed layout and sidebar mini
  //are used together
  sidebarExpandOnHover: false,
  //BoxRefresh Plugin
  enableBoxRefresh: true,
  //Bootstrap.js tooltip
  enableBSToppltip: true,
  BSTooltipSelector: "[data-toggle='tooltip']",
  //Enable Fast Click. Fastclick.js creates a more
  //native touch experience with touch devices. If you
  //choose to enable the plugin, make sure you load the script
  //before AdminLTE's app.js
  enableFastclick: true,
  //Control Sidebar Options
  enableControlSidebar: true,
  controlSidebarOptions: {
    //Which button should trigger the open/close event
    toggleBtnSelector: "[data-toggle='control-sidebar']",
    //The sidebar selector
    selector: ".control-sidebar",
    //Enable slide over content
    slide: true
  },
  //Box Widget Plugin. Enable this plugin
  //to allow boxes to be collapsed and/or removed
  enableBoxWidget: true,
  //Box Widget plugin options
  boxWidgetOptions: {
    boxWidgetIcons: {
      //Collapse icon
      collapse: 'fa-minus',
      //Open icon
      open: 'fa-plus',
      //Remove icon
      remove: 'fa-times'
    },
    boxWidgetSelectors: {
      //Remove button selector
      remove: '[data-widget="remove"]',
      //Collapse button selector
      collapse: '[data-widget="collapse"]'
    }
  },
  //Direct Chat plugin options
  directChat: {
    //Enable direct chat by default
    enable: true,
    //The button to open and close the chat contacts pane
    contactToggleSelector: '[data-widget="chat-pane-toggle"]'
  },
  //Define the set of colors to use globally around the website
  colors: {
    lightBlue: "#3c8dbc",
    red: "#f56954",
    green: "#00a65a",
    aqua: "#00c0ef",
    yellow: "#f39c12",
    blue: "#0073b7",
    navy: "#001F3F",
    teal: "#39CCCC",
    olive: "#3D9970",
    lime: "#01FF70",
    orange: "#FF851B",
    fuchsia: "#F012BE",
    purple: "#8E24AA",
    maroon: "#D81B60",
    black: "#222222",
    gray: "#d2d6de"
  },
  //The standard screen sizes that bootstrap uses.
  //If you change these in the variables.less file, change
  //them here too.
  screenSizes: {
    xs: 480,
    sm: 768,
    md: 992,
    lg: 1200
  }
};

/* ------------------
 * - Implementation -
 * ------------------
 * The next block of code implements AdminLTE's
 * functions and plugins as specified by the
 * options above.
 */
$(function () {
  "use strict";

  //Fix for IE page transitions
  $("body").removeClass("hold-transition");

  //Extend options if external options exist
  if (typeof AdminLTEOptions !== "undefined") {
    $.extend(true,
        $.AdminLTE.options,
        AdminLTEOptions);
  }

  //Easy access to options
  var o = $.AdminLTE.options;

  //Set up the object
  _init();

  //Activate the layout maker
  $.AdminLTE.layout.activate();

  //Enable sidebar tree view controls
  $.AdminLTE.tree('.sidebar');

  //Enable control sidebar
  if (o.enableControlSidebar) {
    $.AdminLTE.controlSidebar.activate();
  }

  //Add slimscroll to navbar dropdown
  if (o.navbarMenuSlimscroll && typeof $.fn.slimscroll != 'undefined') {
    $(".navbar .menu").slimscroll({
      height: o.navbarMenuHeight,
      alwaysVisible: false,
      size: o.navbarMenuSlimscrollWidth
    }).css("width", "100%");
  }

  //Activate sidebar push menu
  if (o.sidebarPushMenu) {
    $.AdminLTE.pushMenu.activate(o.sidebarToggleSelector);
  }

  //Activate Bootstrap tooltip
  if (o.enableBSToppltip) {
    $('body').tooltip({
      selector: o.BSTooltipSelector
    });
  }

  //Activate box widget
  if (o.enableBoxWidget) {
    $.AdminLTE.boxWidget.activate();
  }

  //Activate fast click
  if (o.enableFastclick && typeof FastClick != 'undefined') {
    FastClick.attach(document.body);
  }

  //Activate direct chat widget
  if (o.directChat.enable) {
    $(document).on('click', o.directChat.contactToggleSelector, function () {
      var box = $(this).parents('.direct-chat').first();
      box.toggleClass('direct-chat-contacts-open');
    });
  }

  /*
   * INITIALIZE BUTTON TOGGLE
   * ------------------------
   */
  $('.btn-group[data-toggle="btn-toggle"]').each(function () {
    var group = $(this);
    $(this).find(".btn").on('click', function (e) {
      group.find(".btn.active").removeClass("active");
      $(this).addClass("active");
      e.preventDefault();
    });

  });
});

/* ----------------------------------
 * - Initialize the AdminLTE Object -
 * ----------------------------------
 * All AdminLTE functions are implemented below.
 */
function _init() {
  'use strict';
  /* Layout
   * ======
   * Fixes the layout height in case min-height fails.
   *
   * @type Object
   * @usage $.AdminLTE.layout.activate()
   *        $.AdminLTE.layout.fix()
   *        $.AdminLTE.layout.fixSidebar()
   */
  $.AdminLTE.layout = {
    activate: function () {
      var _this = this;
      _this.fix();
      _this.fixSidebar();
      $(window, ".wrapper").resize(function () {
        _this.fix();
        _this.fixSidebar();
      });
    },
    fix: function () {
      //Get window height and the wrapper height
      var neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
      var window_height = $(window).height();
      var sidebar_height = $(".sidebar").height();
      //Set the min-height of the content and sidebar based on the
      //the height of the document.
      if ($("body").hasClass("fixed")) {
        $(".content-wrapper, .right-side").css('min-height', window_height - $('.main-footer').outerHeight());
      } else {
        var postSetWidth;
        if (window_height >= sidebar_height) {
          $(".content-wrapper, .right-side").css('min-height', window_height - neg);
          postSetWidth = window_height - neg;
        } else {
          $(".content-wrapper, .right-side").css('min-height', sidebar_height);
          postSetWidth = sidebar_height;
        }

        //Fix for the control sidebar height
        var controlSidebar = $($.AdminLTE.options.controlSidebarOptions.selector);
        if (typeof controlSidebar !== "undefined") {
          if (controlSidebar.height() > postSetWidth)
            $(".content-wrapper, .right-side").css('min-height', controlSidebar.height());
        }

      }
    },
    fixSidebar: function () {
      //Make sure the body tag has the .fixed class
      if (!$("body").hasClass("fixed")) {
        if (typeof $.fn.slimScroll != 'undefined') {
          $(".sidebar").slimScroll({destroy: true}).height("auto");
        }
        return;
      } else if (typeof $.fn.slimScroll == 'undefined' && window.console) {
        window.console.error("Error: the fixed layout requires the slimscroll plugin!");
      }
      //Enable slimscroll for fixed layout
      if ($.AdminLTE.options.sidebarSlimScroll) {
        if (typeof $.fn.slimScroll != 'undefined') {
          //Destroy if it exists
          $(".sidebar").slimScroll({destroy: true}).height("auto");
          //Add slimscroll
          $(".sidebar").slimscroll({
            height: ($(window).height() - $(".main-header").height()) + "px",
            color: "rgba(0,0,0,0.2)",
            size: "3px"
          });
        }
      }
    }
  };

  /* PushMenu()
   * ==========
   * Adds the push menu functionality to the sidebar.
   *
   * @type Function
   * @usage: $.AdminLTE.pushMenu("[data-toggle='offcanvas']")
   */
  $.AdminLTE.pushMenu = {
    activate: function (toggleBtn) {
      //Get the screen sizes
      var screenSizes = $.AdminLTE.options.screenSizes;

      //Enable sidebar toggle
      $(document).on('click', toggleBtn, function (e) {
        e.preventDefault();

        //Enable sidebar push menu
        if ($(window).width() > (screenSizes.sm - 1)) {
          if ($("body").hasClass('sidebar-collapse')) {
            $("body").removeClass('sidebar-collapse').trigger('expanded.pushMenu');
          } else {
            $("body").addClass('sidebar-collapse').trigger('collapsed.pushMenu');
          }
        }
        //Handle sidebar push menu for small screens
        else {
          if ($("body").hasClass('sidebar-open')) {
            $("body").removeClass('sidebar-open').removeClass('sidebar-collapse').trigger('collapsed.pushMenu');
          } else {
            $("body").addClass('sidebar-open').trigger('expanded.pushMenu');
          }
        }
      });

      $(".content-wrapper").click(function () {
        //Enable hide menu when clicking on the content-wrapper on small screens
        if ($(window).width() <= (screenSizes.sm - 1) && $("body").hasClass("sidebar-open")) {
          $("body").removeClass('sidebar-open');
        }
      });

      //Enable expand on hover for sidebar mini
      if ($.AdminLTE.options.sidebarExpandOnHover
          || ($('body').hasClass('fixed')
          && $('body').hasClass('sidebar-mini'))) {
        this.expandOnHover();
      }
    },
    expandOnHover: function () {
      var _this = this;
      var screenWidth = $.AdminLTE.options.screenSizes.sm - 1;
      //Expand sidebar on hover
      $('.main-sidebar').hover(function () {
        if ($('body').hasClass('sidebar-mini')
            && $("body").hasClass('sidebar-collapse')
            && $(window).width() > screenWidth) {
          _this.expand();
        }
      }, function () {
        if ($('body').hasClass('sidebar-mini')
            && $('body').hasClass('sidebar-expanded-on-hover')
            && $(window).width() > screenWidth) {
          _this.collapse();
        }
      });
    },
    expand: function () {
      $("body").removeClass('sidebar-collapse').addClass('sidebar-expanded-on-hover');
    },
    collapse: function () {
      if ($('body').hasClass('sidebar-expanded-on-hover')) {
        $('body').removeClass('sidebar-expanded-on-hover').addClass('sidebar-collapse');
      }
    }
  };

  /* Tree()
   * ======
   * Converts the sidebar into a multilevel
   * tree view menu.
   *
   * @type Function
   * @Usage: $.AdminLTE.tree('.sidebar')
   */
  $.AdminLTE.tree = function (menu) {
    var _this = this;
    var animationSpeed = $.AdminLTE.options.animationSpeed;
    $(document).on('click', menu + ' li a', function (e) {
      //Get the clicked link and the next element
      var $this = $(this);
      var checkElement = $this.next();

      //Check if the next element is a menu and is visible
      if ((checkElement.is('.treeview-menu')) && (checkElement.is(':visible')) && (!$('body').hasClass('sidebar-collapse'))) {
        //Close the menu
        checkElement.slideUp(animationSpeed, function () {
          checkElement.removeClass('menu-open');
          //Fix the layout in case the sidebar stretches over the height of the window
          //_this.layout.fix();
        });
        checkElement.parent("li").removeClass("active");
      }
      //If the menu is not visible
      else if ((checkElement.is('.treeview-menu')) && (!checkElement.is(':visible'))) {
        //Get the parent menu
        var parent = $this.parents('ul').first();
        //Close all open menus within the parent
        var ul = parent.find('ul:visible').slideUp(animationSpeed);
        //Remove the menu-open class from the parent
        ul.removeClass('menu-open');
        //Get the parent li
        var parent_li = $this.parent("li");

        //Open the target menu and add the menu-open class
        checkElement.slideDown(animationSpeed, function () {
          //Add the class active to the parent li
          checkElement.addClass('menu-open');
          parent.find('li.active').removeClass('active');
          parent_li.addClass('active');
          //Fix the layout in case the sidebar stretches over the height of the window
          _this.layout.fix();
        });
      }
      //if this isn't a link, prevent the page from being redirected
      if (checkElement.is('.treeview-menu')) {
        e.preventDefault();
      }
    });
  };

  /* ControlSidebar
   * ==============
   * Adds functionality to the right sidebar
   *
   * @type Object
   * @usage $.AdminLTE.controlSidebar.activate(options)
   */
  $.AdminLTE.controlSidebar = {
    //instantiate the object
    activate: function () {
      //Get the object
      var _this = this;
      //Update options
      var o = $.AdminLTE.options.controlSidebarOptions;
      //Get the sidebar
      var sidebar = $(o.selector);
      //The toggle button
      var btn = $(o.toggleBtnSelector);

      //Listen to the click event
      btn.on('click', function (e) {
        e.preventDefault();
        //If the sidebar is not open
        if (!sidebar.hasClass('control-sidebar-open')
            && !$('body').hasClass('control-sidebar-open')) {
          //Open the sidebar
          _this.open(sidebar, o.slide);
        } else {
          _this.close(sidebar, o.slide);
        }
      });

      //If the body has a boxed layout, fix the sidebar bg position
      var bg = $(".control-sidebar-bg");
      _this._fix(bg);

      //If the body has a fixed layout, make the control sidebar fixed
      if ($('body').hasClass('fixed')) {
        _this._fixForFixed(sidebar);
      } else {
        //If the content height is less than the sidebar's height, force max height
        if ($('.content-wrapper, .right-side').height() < sidebar.height()) {
          _this._fixForContent(sidebar);
        }
      }
    },
    //Open the control sidebar
    open: function (sidebar, slide) {
      //Slide over content
      if (slide) {
        sidebar.addClass('control-sidebar-open');
      } else {
        //Push the content by adding the open class to the body instead
        //of the sidebar itself
        $('body').addClass('control-sidebar-open');
      }
    },
    //Close the control sidebar
    close: function (sidebar, slide) {
      if (slide) {
        sidebar.removeClass('control-sidebar-open');
      } else {
        $('body').removeClass('control-sidebar-open');
      }
    },
    _fix: function (sidebar) {
      var _this = this;
      if ($("body").hasClass('layout-boxed')) {
        sidebar.css('position', 'absolute');
        sidebar.height($(".wrapper").height());
        $(window).resize(function () {
          _this._fix(sidebar);
        });
      } else {
        sidebar.css({
          'position': 'fixed',
          'height': 'auto'
        });
      }
    },
    _fixForFixed: function (sidebar) {
      sidebar.css({
        'position': 'fixed',
        'max-height': '100%',
        'overflow': 'auto',
        'padding-bottom': '50px'
      });
    },
    _fixForContent: function (sidebar) {
      $(".content-wrapper, .right-side").css('min-height', sidebar.height());
    }
  };

  /* BoxWidget
   * =========
   * BoxWidget is a plugin to handle collapsing and
   * removing boxes from the screen.
   *
   * @type Object
   * @usage $.AdminLTE.boxWidget.activate()
   *        Set all your options in the main $.AdminLTE.options object
   */
  $.AdminLTE.boxWidget = {
    selectors: $.AdminLTE.options.boxWidgetOptions.boxWidgetSelectors,
    icons: $.AdminLTE.options.boxWidgetOptions.boxWidgetIcons,
    animationSpeed: $.AdminLTE.options.animationSpeed,
    activate: function (_box) {
      var _this = this;
      if (!_box) {
        _box = document; // activate all boxes per default
      }
      //Listen for collapse event triggers
      $(_box).on('click', _this.selectors.collapse, function (e) {
        e.preventDefault();
        _this.collapse($(this));
      });

      //Listen for remove event triggers
      $(_box).on('click', _this.selectors.remove, function (e) {
        e.preventDefault();
        _this.remove($(this));
      });
    },
    collapse: function (element) {
      var _this = this;
      //Find the box parent
      var box = element.parents(".box").first();
      //Find the body and the footer
      var box_content = box.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");
      if (!box.hasClass("collapsed-box")) {
        //Convert minus into plus
        element.children(":first")
            .removeClass(_this.icons.collapse)
            .addClass(_this.icons.open);
        //Hide the content
        box_content.slideUp(_this.animationSpeed, function () {
          box.addClass("collapsed-box");
        });
      } else {
        //Convert plus into minus
        element.children(":first")
            .removeClass(_this.icons.open)
            .addClass(_this.icons.collapse);
        //Show the content
        box_content.slideDown(_this.animationSpeed, function () {
          box.removeClass("collapsed-box");
        });
      }
    },
    remove: function (element) {
      //Find the box parent
      var box = element.parents(".box").first();
      box.slideUp(this.animationSpeed);
    }
  };
}

/* ------------------
 * - Custom Plugins -
 * ------------------
 * All custom plugins are defined below.
 */

/*
 * BOX REFRESH BUTTON
 * ------------------
 * This is a custom plugin to use with the component BOX. It allows you to add
 * a refresh button to the box. It converts the box's state to a loading state.
 *
 * @type plugin
 * @usage $("#box-widget").boxRefresh( options );
 */
(function ($) {

  "use strict";

  $.fn.boxRefresh = function (options) {

    // Render options
    var settings = $.extend({
      //Refresh button selector
      trigger: ".refresh-btn",
      //File source to be loaded (e.g: ajax/src.php)
      source: "",
      //Callbacks
      onLoadStart: function (box) {
        return box;
      }, //Right after the button has been clicked
      onLoadDone: function (box) {
        return box;
      } //When the source has been loaded

    }, options);

    //The overlay
    var overlay = $('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');

    return this.each(function () {
      //if a source is specified
      if (settings.source === "") {
        if (window.console) {
          window.console.log("Please specify a source first - boxRefresh()");
        }
        return;
      }
      //the box
      var box = $(this);
      //the button
      var rBtn = box.find(settings.trigger).first();

      //On trigger click
      rBtn.on('click', function (e) {
        e.preventDefault();
        //Add loading overlay
        start(box);

        //Perform ajax call
        box.find(".box-body").load(settings.source, function () {
          done(box);
        });
      });
    });

    function start(box) {
      //Add overlay and loading img
      box.append(overlay);

      settings.onLoadStart.call(box);
    }

    function done(box) {
      //Remove overlay and loading img
      box.find(overlay).remove();

      settings.onLoadDone.call(box);
    }

  };

})(jQuery);

 /*
 * EXPLICIT BOX CONTROLS
 * -----------------------
 * This is a custom plugin to use with the component BOX. It allows you to activate
 * a box inserted in the DOM after the app.js was loaded, toggle and remove box.
 *
 * @type plugin
 * @usage $("#box-widget").activateBox();
 * @usage $("#box-widget").toggleBox();
 * @usage $("#box-widget").removeBox();
 */
(function ($) {

  'use strict';

  $.fn.activateBox = function () {
    $.AdminLTE.boxWidget.activate(this);
  };

  $.fn.toggleBox = function(){
    var button = $($.AdminLTE.boxWidget.selectors.collapse, this);
    $.AdminLTE.boxWidget.collapse(button);
  };

  $.fn.removeBox = function(){
    var button = $($.AdminLTE.boxWidget.selectors.remove, this);
    $.AdminLTE.boxWidget.remove(button);
  };

})(jQuery);

/*
 * TODO LIST CUSTOM PLUGIN
 * -----------------------
 * This plugin depends on iCheck plugin for checkbox and radio inputs
 *
 * @type plugin
 * @usage $("#todo-widget").todolist( options );
 */
(function ($) {

  'use strict';

  $.fn.todolist = function (options) {
    // Render options
    var settings = $.extend({
      //When the user checks the input
      onCheck: function (ele) {
        return ele;
      },
      //When the user unchecks the input
      onUncheck: function (ele) {
        return ele;
      }
    }, options);

    return this.each(function () {

      if (typeof $.fn.iCheck != 'undefined') {
        $('input', this).on('ifChecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onCheck.call(ele);
        });

        $('input', this).on('ifUnchecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onUncheck.call(ele);
        });
      } else {
        $('input', this).on('change', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          if ($('input', ele).is(":checked")) {
            settings.onCheck.call(ele);
          } else {
            settings.onUncheck.call(ele);
          }
        });
      }
    });
  };
}(jQuery));

/**
 * AdminLTE Demo Menu
 * ------------------
 * You should not use this file in production.
 * This file is for demo purposes only.
 */
(function ($, AdminLTE) {

  "use strict";

  /**
   * List of all the available skins
   *
   * @type Array
   */
  var my_skins = [
    "skin-blue",
    "skin-black",
    "skin-red",
    "skin-yellow",
    "skin-purple",
    "skin-green",
    "skin-blue-light",
    "skin-black-light",
    "skin-red-light",
    "skin-yellow-light",
    "skin-purple-light",
    "skin-green-light"
  ];

  //Create the new tab
  var tab_pane = $("<div />", {
    "id": "control-sidebar-theme-demo-options-tab",
    "class": "tab-pane active"
  });

  //Create the tab button
  var tab_button = $("<li />", {"class": "active"})
      .html("<a href='#control-sidebar-theme-demo-options-tab' data-toggle='tab'>"
      + "<i class='fa fa-wrench'></i>"
      + "</a>");

  //Add the tab button to the right sidebar tabs
  $("[href='#control-sidebar-home-tab']")
      .parent()
      .before(tab_button);

  //Create the menu
  var demo_settings = $("<div />");

  //Layout options
  demo_settings.append(
      "<h4 class='control-sidebar-heading'>"
      + "Layout Options"
      + "</h4>"
        //Fixed layout
      + "<div class='form-group'>"
      + "<label class='control-sidebar-subheading'>"
      + "<input type='checkbox' data-layout='fixed' class='pull-right'/> "
      + "Fixed layout"
      + "</label>"
      + "<p>Activate the fixed layout. You can't use fixed and boxed layouts together</p>"
      + "</div>"
        //Boxed layout
      + "<div class='form-group'>"
      + "<label class='control-sidebar-subheading'>"
      + "<input type='checkbox' data-layout='layout-boxed'class='pull-right'/> "
      + "Boxed Layout"
      + "</label>"
      + "<p>Activate the boxed layout</p>"
      + "</div>"
        //Sidebar Toggle
      + "<div class='form-group'>"
      + "<label class='control-sidebar-subheading'>"
      + "<input type='checkbox' data-layout='sidebar-collapse' class='pull-right'/> "
      + "Toggle Sidebar"
      + "</label>"
      + "<p>Toggle the left sidebar's state (open or collapse)</p>"
      + "</div>"
        //Sidebar mini expand on hover toggle
      + "<div class='form-group'>"
      + "<label class='control-sidebar-subheading'>"
      + "<input type='checkbox' data-enable='expandOnHover' class='pull-right'/> "
      + "Sidebar Expand on Hover"
      + "</label>"
      + "<p>Let the sidebar mini expand on hover</p>"
      + "</div>"
        //Control Sidebar Toggle
      + "<div class='form-group'>"
      + "<label class='control-sidebar-subheading'>"
      + "<input type='checkbox' data-controlsidebar='control-sidebar-open' class='pull-right'/> "
      + "Toggle Right Sidebar Slide"
      + "</label>"
      + "<p>Toggle between slide over content and push content effects</p>"
      + "</div>"
        //Control Sidebar Skin Toggle
      + "<div class='form-group'>"
      + "<label class='control-sidebar-subheading'>"
      + "<input type='checkbox' data-sidebarskin='toggle' class='pull-right'/> "
      + "Toggle Right Sidebar Skin"
      + "</label>"
      + "<p>Toggle between dark and light skins for the right sidebar</p>"
      + "</div>"
  );
  var skins_list = $("<ul />", {"class": 'list-unstyled clearfix'});

  //Dark sidebar skins
  var skin_blue =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-blue' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px; background: #367fa9;'></span><span class='bg-light-blue' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin'>Blue</p>");
  skins_list.append(skin_blue);
  var skin_black =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-black' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div style='box-shadow: 0 0 2px rgba(0,0,0,0.1)' class='clearfix'><span style='display:block; width: 20%; float: left; height: 7px; background: #fefefe;'></span><span style='display:block; width: 80%; float: left; height: 7px; background: #fefefe;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin'>Black</p>");
  skins_list.append(skin_black);
  var skin_purple =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-purple' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-purple-active'></span><span class='bg-purple' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin'>Purple</p>");
  skins_list.append(skin_purple);
  var skin_green =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-green' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-green-active'></span><span class='bg-green' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin'>Green</p>");
  skins_list.append(skin_green);
  var skin_red =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-red' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-red-active'></span><span class='bg-red' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin'>Red</p>");
  skins_list.append(skin_red);
  var skin_yellow =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-yellow' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-yellow-active'></span><span class='bg-yellow' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #222d32;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin'>Yellow</p>");
  skins_list.append(skin_yellow);

  //Light sidebar skins
  var skin_blue_light =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-blue-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px; background: #367fa9;'></span><span class='bg-light-blue' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin' style='font-size: 12px'>Blue Light</p>");
  skins_list.append(skin_blue_light);
  var skin_black_light =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-black-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div style='box-shadow: 0 0 2px rgba(0,0,0,0.1)' class='clearfix'><span style='display:block; width: 20%; float: left; height: 7px; background: #fefefe;'></span><span style='display:block; width: 80%; float: left; height: 7px; background: #fefefe;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin' style='font-size: 12px'>Black Light</p>");
  skins_list.append(skin_black_light);
  var skin_purple_light =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-purple-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-purple-active'></span><span class='bg-purple' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin' style='font-size: 12px'>Purple Light</p>");
  skins_list.append(skin_purple_light);
  var skin_green_light =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-green-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-green-active'></span><span class='bg-green' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin' style='font-size: 12px'>Green Light</p>");
  skins_list.append(skin_green_light);
  var skin_red_light =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-red-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-red-active'></span><span class='bg-red' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin' style='font-size: 12px'>Red Light</p>");
  skins_list.append(skin_red_light);
  var skin_yellow_light =
      $("<li />", {style: "float:left; width: 33.33333%; padding: 5px;"})
          .append("<a href='javascript:void(0);' data-skin='skin-yellow-light' style='display: block; box-shadow: 0 0 3px rgba(0,0,0,0.4)' class='clearfix full-opacity-hover'>"
          + "<div><span style='display:block; width: 20%; float: left; height: 7px;' class='bg-yellow-active'></span><span class='bg-yellow' style='display:block; width: 80%; float: left; height: 7px;'></span></div>"
          + "<div><span style='display:block; width: 20%; float: left; height: 20px; background: #f9fafc;'></span><span style='display:block; width: 80%; float: left; height: 20px; background: #f4f5f7;'></span></div>"
          + "</a>"
          + "<p class='text-center no-margin' style='font-size: 12px;'>Yellow Light</p>");
  skins_list.append(skin_yellow_light);

  demo_settings.append("<h4 class='control-sidebar-heading'>Skins</h4>");
  demo_settings.append(skins_list);

  tab_pane.append(demo_settings);
  $("#control-sidebar-home-tab").after(tab_pane);

  setup();

  /**
   * Toggles layout classes
   *
   * @param String cls the layout class to toggle
   * @returns void
   */
  function change_layout(cls) {
    $("body").toggleClass(cls);
    AdminLTE.layout.fixSidebar();
    //Fix the problem with right sidebar and layout boxed
    if (cls == "layout-boxed")
      AdminLTE.controlSidebar._fix($(".control-sidebar-bg"));
    if ($('body').hasClass('fixed') && cls == 'fixed') {
      AdminLTE.pushMenu.expandOnHover();
      AdminLTE.layout.activate();
    }
    AdminLTE.controlSidebar._fix($(".control-sidebar-bg"));
    AdminLTE.controlSidebar._fix($(".control-sidebar"));
  }

  /**
   * Replaces the old skin with the new skin
   * @param String cls the new skin class
   * @returns Boolean false to prevent link's default action
   */
  function change_skin(cls) {
    $.each(my_skins, function (i) {
      $("body").removeClass(my_skins[i]);
    });

    $("body").addClass(cls);
    store('skin', cls);
    return false;
  }

  /**
   * Store a new settings in the browser
   *
   * @param String name Name of the setting
   * @param String val Value of the setting
   * @returns void
   */
  function store(name, val) {
    if (typeof (Storage) !== "undefined") {
      localStorage.setItem(name, val);
    } else {
      window.alert('Please use a modern browser to properly view this template!');
    }
  }

  /**
   * Get a prestored setting
   *
   * @param String name Name of of the setting
   * @returns String The value of the setting | null
   */
  function get(name) {
    if (typeof (Storage) !== "undefined") {
      return localStorage.getItem(name);
    } else {
      window.alert('Please use a modern browser to properly view this template!');
    }
  }

  /**
   * Retrieve default settings and apply them to the template
   *
   * @returns void
   */
  function setup() {
    var tmp = get('skin');
    if (tmp && $.inArray(tmp, my_skins))
      change_skin(tmp);

    //Add the change skin listener
    $("[data-skin]").on('click', function (e) {
      e.preventDefault();
      change_skin($(this).data('skin'));
    });

    //Add the layout manager
    $("[data-layout]").on('click', function () {
      change_layout($(this).data('layout'));
    });

    $("[data-controlsidebar]").on('click', function () {
      change_layout($(this).data('controlsidebar'));
      var slide = !AdminLTE.options.controlSidebarOptions.slide;
      AdminLTE.options.controlSidebarOptions.slide = slide;
      if (!slide)
        $('.control-sidebar').removeClass('control-sidebar-open');
    });

    $("[data-sidebarskin='toggle']").on('click', function () {
      var sidebar = $(".control-sidebar");
      if (sidebar.hasClass("control-sidebar-dark")) {
        sidebar.removeClass("control-sidebar-dark")
        sidebar.addClass("control-sidebar-light")
      } else {
        sidebar.removeClass("control-sidebar-light")
        sidebar.addClass("control-sidebar-dark")
      }
    });

    $("[data-enable='expandOnHover']").on('click', function () {
      $(this).attr('disabled', true);
      AdminLTE.pushMenu.expandOnHover();
      if (!$('body').hasClass('sidebar-collapse'))
        $("[data-layout='sidebar-collapse']").click();
    });

    // Reset options
    if ($('body').hasClass('fixed')) {
      $("[data-layout='fixed']").attr('checked', 'checked');
    }
    if ($('body').hasClass('layout-boxed')) {
      $("[data-layout='layout-boxed']").attr('checked', 'checked');
    }
    if ($('body').hasClass('sidebar-collapse')) {
      $("[data-layout='sidebar-collapse']").attr('checked', 'checked');
    }

  }
})(jQuery, $.AdminLTE);

(function($) {
    $.timeCube = function(el, options) {
        // To avoid scope issues, use 'base' instead of 'this'
        // to reference this class from internal events and functions.
        var base = this;

        // Access to jQuery and DOM versions of element
        base.$el = $(el);
        base.el = el;

        // Add a reverse reference to the DOM object
        base.$el.data("timeCube", base);

        // Initialization
        base.init = function() {
            // merge in any specified options
            base.options = $.extend({}, $.timeCube.defaultOptions, options);

            // the width of the timeline;
            base.timelineWidth = base.$el.width();

            // which event is selected
            base.currentIndex = 0;

            // Set our dates to Unix epoch
            if (base.options.startDate == "default") {
                base.startDate = new Date(base.options.data[0].startDate);
            } else {
                base.startDate = new Date(base.options.startDate);
            }

            if (base.options.endDate == "default") {
                base.endDate = new Date(base.options.data[(base.options.data.length - 1)].startDate);
            } else {
                base.endDate = new Date(base.options.endDate);
            }

            // master CSS class
            base.$el.addClass('timeCube');

            // Create top nav
            base.$nav = $("<div>");
            base.$nav.addClass('nav');
            base.$el.append(base.$nav);

            // the legend
            base.$legend = $("<div>");
            base.$legend.addClass('legend');
            base.$nav.append(base.$legend);

            // the line
            base.$line = $("<div>");
            base.$line.addClass('line');
            base.$nav.append(base.$line);

            // Create container to hold all of the timeline objects
            base.$container = $("<div>");
            base.$container.addClass('container');
            base.$el.append(base.$container);

            // Define month friendly names
            var monthNames = new Array(12);
            monthNames[0] = "JANUARY";
            monthNames[1] = "FEBRUARY";
            monthNames[2] = "MARCH";
            monthNames[3] = "APRIL";
            monthNames[4] = "MAY";
            monthNames[5] = "JUNE";
            monthNames[6] = "JULY";
            monthNames[7] = "AUGUST";
            monthNames[8] = "SEPTEMBER";
            monthNames[9] = "OCTOBER";
            monthNames[10] = "NOVEMBER";
            monthNames[11] = "DECEMBER";

            // loop through the timeline data and add them to the page
            base.eventDivs = [];
            base.markerDivs = [];
            $(base.options.data).each(function(index, d) {

                // First, the big timeline divs
                base.eventDivs[index] = $("<div>");
                base.eventDivs[index].addClass('event');

                if (base.options.showDate) {
                    base.eventDivs[index].html("<span class='date'>" + monthNames[d.startDate.getUTCMonth()] + " " + d.startDate.getUTCDate() + ", " + d.startDate.getUTCFullYear() + "</span><h1>" + d.title + "</h1><p>" + d.description + "</p>");
                } else {
                    base.eventDivs[index].html("<h1>" + d.title + "</h1><p>" + d.description + "</p>");
                }

                if (d.extraclass) {
                    base.eventDivs[index].addClass(d.extraclass);
                }

                base.$container.append(base.eventDivs[index]);
                base.eventDivs[index].css("left", (base.timelineWidth * index) + "px");

                // Second, the markers along the top
                base.markerDivs[index] = $("<div>");
                base.markerDivs[index].addClass('marker');
                base.markerDivs[index].css("left", base.getNavPosition(d.startDate) + "px");
                base.$line.append(base.markerDivs[index]);
            });

            // ******************************
            // Build the legend
            // ******************************

            var legendCount;
            // set legendCount to the number of items we should be drawing
            if (base.options.granularity == "century") {
                legendCount = Math.floor(base.yearsBetweenDates(base.startDate, base.endDate) / 100);
            } else if (base.options.granularity == "decade") {
                legendCount = Math.floor(base.yearsBetweenDates(base.startDate, base.endDate) / 10);
            } else if (base.options.granularity == "year") {
                legendCount = base.yearsBetweenDates(base.startDate, base.endDate);
            } else if (base.options.granularity == "month") {
                legendCount = base.monthsBetweenDates(base.startDate, base.endDate);
            } else if (base.options.granularity == "day") {
                legendCount = base.daysBetweenDates(base.startDate, base.endDate);
            } else {
                legendCount = 0;
                alert('invalid setting for granularity');
            }

            // then draw all of the legend items
            for (i = 0; i <= legendCount; i++) {

                // We'll start with a date of 0 and set it to match whichever legend element we are currently showing
                var m = new Date(0);

                // we
                var label = "undefined";

                if (base.options.granularity == "century") {
                    var newYear = Math.floor((base.startDate.getUTCFullYear() + (i * 100)) / 100) * 100;
                    m.setUTCFullYear(newYear); // increment year on each loop
                    label = m.getUTCFullYear() + "s";
                } else if (base.options.granularity == "decade") {
                    var newYear = Math.floor((base.startDate.getUTCFullYear() + (i * 10)) / 10) * 10;
                    m.setUTCFullYear(newYear); // increment year on each loop
                    label = m.getUTCFullYear();
                } else if (base.options.granularity == "year") {
                    m.setUTCFullYear(base.startDate.getUTCFullYear() + i); // increment year on each loop
                    label = m.getUTCFullYear();
                } else if (base.options.granularity == "month") {
                    m.setUTCFullYear(base.startDate.getUTCFullYear());
                    m.setUTCMonth(base.startDate.getUTCMonth() + i); // increment month on each loop
                    label = monthNames[m.getUTCMonth()] + " " + m.getUTCFullYear();
                } else if (base.options.granularity == "day") {
                    m.setUTCFullYear(base.startDate.getUTCFullYear());
                    m.setUTCMonth(base.startDate.getUTCMonth());
                    m.setUTCDate(base.startDate.getUTCDate() + i); // increment day on each loop
                    label = m.getUTCDate() == 1 ? (m.getUTCDate() + " " + monthNames[m.getUTCMonth()]) : m.getUTCDate();
                } else {
                    alert('invalid setting for granularity');
                    return false;
                }

                // base.getNavPosition converts a date to a pixel X position on the timeline nav. If it's below 0, we just want to show the marker at 0.
                var pixelPosition = base.getNavPosition(m) < 0 ? 0 : base.getNavPosition(m);

                // Then create the label element
                var labelDiv = $("<div>");
                labelDiv.addClass('label');
                labelDiv.html(label);
                labelDiv.css("left", pixelPosition + "px"); // all other positioning is handled in CSS
                base.$legend.append(labelDiv);
            }

            // *********************************************************************************************
            // EVENTS
            // *********************************************************************************************

            // We'll store mouse info here while interactions are in progress. (or touches).
            base.mouse = {
                start: {},
                last: {},
                momentum: 0
            };
            base.containerPosition = {
                current: 0,
                start: 0
            };

            // is this a touch device?
            base.touch = document.ontouchmove !== undefined;

            base.$container.bind((base.touch ? 'touchstart' : 'mousedown touchstart'), function(evt) {

                // disable CSS animations				
                base.$container.css({
                    '-webkit-transition-property': '-webkit-transform',
                    '-webkit-transition-duration': '0ms'
                });

                $(base.eventDivs).each(function(i, d) {
                    $(d).css({
                        '-webkit-transition-property': '-webkit-transform',
                        '-webkit-transition-duration': '0ms'
                    });
                    $(d).children().css({
                        '-webkit-transition-property': '-webkit-transform',
                        '-webkit-transition-duration': '0ms'
                    });
                });

                base.containerPosition.start = base.containerPosition.current;

                // allow clicks on links within the moveable area
                if ($(evt.target).is('a, iframe')) {
                    return true;
                }

                evt.originalEvent.touches ? evt = evt.originalEvent.touches[0] : null;
                base.mouse.start.x = evt.pageX;
                base.mouse.start.y = evt.pageY;
                base.mouse.startEvent = base.mouse.currentEvent;

                base.mouse.last.x = event.pageX;
                base.mouse.last.y = event.pageY;
                base.mouse.last.time = new Date().getTime();

                $(document).bind('mousemove touchmove', function(event) {
                    // Only perform movement if one touch or mouse
                    if (!base.touch || !(event.originalEvent && event.originalEvent.touches.length > 1)) {
                        event.preventDefault();
                        // Get touch co-ords
                        event.originalEvent.touches ? event = event.originalEvent.touches[0] : null;
                        // DO SOMETHING HERE

                        // get the momentum
                        var moveTime = (new Date().getTime() - base.mouse.last.time);
                        var moveDistance = base.mouse.last.x - event.pageX;

                        base.mouse.momentum = moveDistance / moveTime * -100;

                        // track the last position and time for momentum
                        base.mouse.last.x = event.pageX;
                        base.mouse.last.y = event.pageY;
                        base.mouse.last.time = new Date().getTime();

                        base.containerPosition.current = base.containerPosition.start + event.pageX - base.mouse.start.x;

                        // make sure we stay within the timeline items
                        var minX = (-1 * (base.options.data.length - 1) * base.timelineWidth);
                        var maxX = 0;
                        if (base.containerPosition.current > maxX) {
                            base.containerPosition.current = base.containerPosition.current / 3;
                        }

                        if (base.containerPosition.current < minX) {
                            base.containerPosition.current = ((base.containerPosition.current - minX) / 3) + minX;
                        }
                        base.$container[0].style.webkitTransform = "translateX(" + base.containerPosition.current + "px)";

                        base.doTransitions();

                    }
                });

                $(document).bind('mouseup touchend', function(e) {
                    $(document).unbind('mousemove touchmove mouseup touchend');
                    // SNAP

                    // if the last move was less than 50 miliseconds ago, use momentum
                    var moveTime = (new Date().getTime() - base.mouse.last.time);
                    if (moveTime < 50) {
                        base.containerPosition.current += base.mouse.momentum;
                    }

                    // find out to which index we should be snapping
                    var closestEventIndex = Math.round(base.containerPosition.current / base.timelineWidth) * -1;
                    closestEventIndex = closestEventIndex < 0 ? 0 : closestEventIndex;
                    closestEventIndex = closestEventIndex > (base.options.data.length - 1) ? (base.options.data.length - 1) : closestEventIndex;
                    base.snapToIndex(closestEventIndex);

                });
            });

            // touch the navigation bar
            base.$nav.bind((base.touch ? 'touchstart' : 'mousedown touchstart'), function(evt) {
                evt.preventDefault();

                evt.originalEvent.touches ? evt = evt.originalEvent.touches[0] : null;
                base.mouse.start.x = evt.pageX;
                base.mouse.start.y = evt.pageY;
                base.mouse.startEvent = base.mouse.currentEvent;
                base.navTouch(evt);

                $(document).bind('mousemove touchmove', function(event) {
                    // Only perform movement if one touch or mouse
                    if (!base.touch || !(event.originalEvent && event.originalEvent.touches.length > 1)) {
                        event.preventDefault();
                        // Get touch co-ords
                        event.originalEvent.touches ? event = event.originalEvent.touches[0] : null;
                        base.navTouch(event);

                    }
                });

                $(document).bind('mouseup touchend', function(e) {
                    $(document).unbind('mousemove touchmove mouseup touchend');

                });
            });

            // NEXT BUTTON
            if (base.options.nextButton != undefined) {
                $(base.options.nextButton).bind((base.touch ? 'touchstart' : 'mousedown touchstart'), function(evt) {
                    evt.preventDefault();
                    if (base.currentIndex < (base.options.data.length - 1)) {
                        $(base.options.nextButton).addClass('active');
                        base.snapToIndex(base.currentIndex + 1);
                    }
                });

                $(base.options.nextButton).bind((base.touch ? 'touchend' : 'mouseup touchend'), function(evt) {
                    evt.preventDefault();
                    $(base.options.nextButton).removeClass('active');
                });
            }

            // PREVIOUS BUTTON
            if (base.options.previousButton != undefined) {
                $(base.options.previousButton).bind((base.touch ? 'touchstart' : 'mousedown touchstart'), function(evt) {
                    evt.preventDefault();
                    if (base.currentIndex > 0) {
                        $(base.options.previousButton).addClass('active');
                        base.snapToIndex(base.currentIndex - 1);
                    }
                    return false;
                });

                $(base.options.previousButton).bind((base.touch ? 'touchend' : 'mouseup touchend'), function(evt) {
                    evt.preventDefault();
                    $(base.options.previousButton).removeClass('active');
                });
            }

            if (base.options.saveReference !== undefined) {
                base.options.saveReference(base);
            }

            if (base.options.initialIndex !== undefined) {
                base.snapToIndex(base.options.initialIndex);
            } else {
                base.snapToIndex(0);
            }

        };

        // *********************************************************************************************
        // FUNCTIONS
        // *********************************************************************************************

        // *********************************************************************************************
        // base.navTouch(event)
        // Handles events from the nav bar
        // *********************************************************************************************
        base.navTouch = function(event) {

            // DO SOMETHING HERE				
            var navX = event.pageX - base.$nav.offset().left - parseInt(base.$nav.css("padding-left").replace("px", ""));
            var navY = event.pageY - base.$nav.offset().top;

            // get the multiplier for how far into the timeline we just touched
            var timelinePosition = navX / base.$nav.width();

            // and generate a date that would correspond
            var targetTime = Math.floor(((base.endDate.getTime() - base.startDate.getTime()) * timelinePosition) + base.startDate.getTime());

            var timeDifferences = [];
            // now to find the closest match...
            $(base.options.data).each(function(i, d) {
                timeDifferences[i] = Math.abs(targetTime - d.startDate.getTime());
            });
            var index = timeDifferences.indexOf(Math.min.apply(null, timeDifferences));
            if (index != base.currentIndex) {
                base.snapToIndex(index);
            }

        };

        // *********************************************************************************************
        // base.doTransitions()
        // Styles all the event divs with their current transform for transitions
        // *********************************************************************************************
        base.doTransitions = function() {
            base.$container.children().each(function(index, d) {
                var distanceFromCenter = base.containerPosition.current - (index * base.timelineWidth * -1); // how far (+/-) they are from position 0
                var transitionPoint = distanceFromCenter / base.timelineWidth; // find the fraction
                // transitionPoint < -1 ? transitionPoint = -1 : null; //cap at 1 / -1
                // transitionPoint > 1 ? transitionPoint = 1 : null; // cap at 1 / -1
                d.style.webkitTransform = "translate3D(" + (base.options.transitionSpacing * transitionPoint * -1) + "px, 0px, " + (Math.abs(transitionPoint) * -1 * (base.timelineWidth / 2)) + "px) rotateY(" + (base.options.transitionAngle * transitionPoint) + "deg)";

                /*
                // animate each element independently
                var childTransitionStrength = (0.5 - Math.abs(0.5 - Math.abs(transitionPoint))) * 2;
                transitionPoint < 0 ? (childTransitionStrength = childTransitionStrength * -1) : null;
				
                $(d).children().each(function(i, c){
                	c.style.webkitTransform = "translate3D(0px, 0px, 0px) rotateY(" + (childTransitionStrength * i * 8) + "deg)";
                });
                */

            });
        };

        // *********************************************************************************************
        // base.snapToIndex(index)
        // return an x position along the timeline nav for a given date, based on base.$nav.width();
        // *********************************************************************************************
        base.snapToIndex = function(index) {

            base.currentIndex = index;

            // turn on CSS animations
            base.$container.css({
                '-webkit-transition-property': '-webkit-transform',
                '-webkit-transition-duration': '400ms'
            });

            // set the current position and move the timeline container
            base.containerPosition.current = index * base.timelineWidth * -1
            base.$container[0].style.webkitTransform = "translateX(" + base.containerPosition.current + "px)";

            // turn on CSS animations for events and calculate transitions
            $(base.eventDivs).each(function(i, d) {
                $(d).css({
                    '-webkit-transition-property': '-webkit-transform',
                    '-webkit-transition-duration': '400ms'
                });
                $(d).children().css({
                    '-webkit-transition-property': '-webkit-transform',
                    '-webkit-transition-duration': '400ms'
                });
            });
            base.doTransitions();

            // Activate the marker
            $(base.markerDivs).each(function(i, m) {
                m.removeClass('active');
            });
            $(base.markerDivs[index]).addClass('active');

            // enable or disable previous & next controls
            if (base.options.previousButton != undefined && base.currentIndex == 0) {
                $(base.options.previousButton).addClass("disabled");
            } else {
                $(base.options.previousButton).removeClass("disabled");
            }

            if (base.options.nextButton != undefined && base.currentIndex >= (base.options.data.length - 1)) {
                $(base.options.nextButton).addClass("disabled");
            } else {
                $(base.options.nextButton).removeClass("disabled");
            }

            if (base.options.onTimelineChange !== undefined) {
                base.options.onTimelineChange(index);
            }

        };

        // *********************************************************************************************
        // base.getNavPosition(date)
        // return an x position along the timeline nav for a given date, based on base.$nav.width();
        // *********************************************************************************************
        base.getNavPosition = function(date) {

            var timelineStartTime = base.startDate.getTime();
            var timelineEndTime = base.endDate.getTime();
            var eventTime = date.getTime();
            var range = base.endDate.getTime() - base.startDate.getTime();
            utcDate = date.getTime();
            utcDate -= base.startDate.getTime();
            var position = utcDate / range;
            var pixelPosition = position * base.$nav.width();
            var testPosition = (eventTime - timelineStartTime) / (timelineEndTime - timelineStartTime);
            return Math.floor(pixelPosition);
        };

        // *********************************************************************************************
        // base.yearsBetweenDates(date1, date2)
        // Returns the number of years between two dates
        // *********************************************************************************************
        base.yearsBetweenDates = function(date1, date2) {
            var yearGap = Math.abs(date2.getUTCFullYear() - date1.getUTCFullYear());
            return yearGap;
        };

        // *********************************************************************************************
        // base.monthsBetweenDates(date1, date2)
        // Returns the number of months between two dates
        // *********************************************************************************************
        base.monthsBetweenDates = function(date1, date2) {
            var monthGap = Math.abs(date2.getUTCMonth() - date1.getUTCMonth());
            if (base.startDate.getUTCFullYear() < base.endDate.getUTCFullYear()) {
                monthGap += (Math.abs(base.endDate.getUTCFullYear() - base.startDate.getUTCFullYear()) * 12);
            }
            return monthGap;
        };

        // *********************************************************************************************
        // base.daysBetweenDates(date1, date2)
        // Returns the number of days between two dates
        // *********************************************************************************************		
        base.daysBetweenDates = function(date1, date2) {

            // The number of milliseconds in one day
            var ONE_DAY = 1000 * 60 * 60 * 24

            // Convert both dates to milliseconds
            var date1_ms = date1.getTime()
            var date2_ms = date2.getTime()

            // Calculate the difference in milliseconds
            var difference_ms = Math.abs(date1_ms - date2_ms)

            // Convert back to days and return
            return Math.round(difference_ms / ONE_DAY)

        };

        // Run initializer
        base.init();
    };

    // Default options
    $.timeCube.defaultOptions = {
        data: {},
        granularity: "month",
        startDate: "default",
        endDate: "default",
        transitionAngle: 60,
        transitionSpacing: 100,
        nextButton: undefined,
        previousButton: undefined,
        initialIndex: 0,
        showDate: true
    };

    $.fn.timeCube = function(options) {
        return this.each(function() {
            (new $.timeCube(this, options));

            // HAVE YOUR PLUGIN DO GENERIC STUFF HERE

            // END DOING STUFF

        });
    };

})(jQuery);

//# sourceMappingURL=hemi.min.js.map
